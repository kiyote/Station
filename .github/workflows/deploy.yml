name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the environment
        default: dev
        options:
        - dev
        - prod
      webclient:
        required: true
        type: choice
        description: Deploy the webclient to S3
        default: 'false'
        options:
        - 'true'
        - 'false'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_VERSION: 1.3.1
  PLAN_DIR: "${{ github.workspace }}"

jobs:
  # Generates a plan in preparation for application
  plan:
    name: Terraform Plan
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: ${{ github.event.inputs.environment }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: ${{ env.TERRAFORM_VERSION }}
         
      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

      - name: Terraform Plan
        run: terraform plan -input=false -lock=false -out="${{ env.PLAN_DIR }}/terraform.plan"
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

      - name: Store Plan
        uses: actions/upload-artifact@v3
        with:
          name: plan
          path: "${{ env.PLAN_DIR }}/terraform.plan"
          retention-days: 1
          if-no-files-found: error


  # Applies the terraform
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: ${{ github.event.inputs.environment }}
    needs:
      - plan
        
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Setup
        id: setup
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: ${{ env.TERRAFORM_VERSION }}
           terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

      - name: Restore Plan
        id: plan
        uses: actions/download-artifact@v3
        with:
          name: plan

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -input=false "${{ env.PLAN_DIR }}/terraform.plan"
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

      - name: Setup .NET
        if: github.event.inputs.webclient == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x

      - name: Restore
        if: github.event.inputs.webclient == 'true'
        run: dotnet restore

      - name: Build
        if: github.event.inputs.webclient == 'true'
        run: dotnet build --configuration Release --no-restore

      - name: Publish WebClient
        if: github.event.inputs.webclient == 'true'
        run: dotnet publish --no-build --no-restore --configuration Release --output release
        working-directory: src/Station/Client

      - name: Copy WebClient
        if: github.event.inputs.webclient == 'true'
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: './src/Station/Client/release/wwwroot'
          dest: 's3://station-${{ github.event.inputs.environment }}-webclient'
          flags: --recursive

